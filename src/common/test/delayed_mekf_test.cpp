extern "C" {
#include "common/delayed_mekf.h"

#include <slap/slap.h>

#include "common/linear_algebra.h"
}

#include <fmt/core.h>
#include <fmt/ostream.h>
#include <gtest/gtest.h>

namespace rexquad {

TEST(DelayedMEKFTests, ConstructAndFree) {
  rexquad_DelayedMEKF filter = rexquad_NewDelayedMEKF(10);
  rexquad_FreeDelayedMEKF(&filter);
}

TEST(DelayedMEKFTests, Initialize) {
  int delay_comp = 10;
  const int n = 16;
  const int e = 15;
  const int m = 6;
  // const int n0 = 13;

  rexquad_DelayedMEKF filter = rexquad_NewDelayedMEKF(delay_comp);
  double Wf[36];
  double Vf[225];
  double x0[13] = {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  double b0[6];
  double Pf0[225];
  rexquad_SetIdentity(m, Wf, 1e-4);
  rexquad_SetIdentity(e, Vf, 1e-6);
  (void)x0;
  rexquad_SetConstant(m, 1, b0, 0.1);
  rexquad_SetIdentity(e, Pf0, 1.0);
  rexquad_InitializeDelayedMEKF(&filter, delay_comp, Wf, Vf, x0, b0, Pf0);
  double xf[16] = {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1};
  const double* xf_ = rexquad_GetFilterState(&filter);
  double err = rexquad_NormSquaredDifference(n, xf, xf_);
  EXPECT_LT(err, 1e-10);
  rexquad_FreeDelayedMEKF(&filter);
}

TEST(DelayedMEKFTests, StatePrediction) {
  int delay_comp = 10;
  const int n = 16;
  const int e = 15;
  const int m = 6;
  // const int n0 = 13;

  rexquad_DelayedMEKF filter = rexquad_NewDelayedMEKF(delay_comp);
  rexquad_InitializeDelayMEKFDefault(&filter);

  // clang-format off
  // Input data
  double xd_[16] = {1.0,  0.2, 1.3, 0.999, 0.0, 0.0, 0.04362, 0.1,
                    -0.2, 0.3, 0.2, 0.2,   0.2, 0.3, 0.3,     0.3};
  double y_imu_[6] = {0.25, 0.24, 0.23, 0.33, 0.32, 0.31};

  // Expected ouput
  double xp_expected_[16] = {1.0011704038156, 0.19809495616880002, 1.3029997111132001, 0.9989978015175386, 0.00014548799745396022, 0.00010644299813724764, 0.04366994923577589, 0.1004395926454363, -0.19954937215069798, 0.20228941296344716, 0.2, 0.2, 0.2, 0.3, 0.3, 0.3};
  double Pp_expected_[225] = {1.0002504905768532, 8.918682275686889e-6, -1.4043493330348014e-5, 0.0005227524248267188, 0.005977680263163437, 0.0038083990887929683, 0.008788398793359999, -0.0007698002515747396, 6.713860443324207e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.918682275686889e-6, 1.0002414531892243, 2.285832460633498e-5, -0.0059770054432413365, 0.0005242162791857848, 0.0023394552017524375, 0.0007698123391225465, 0.008788423657129077, 3.754367779050982e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4043493330348014e-5, 2.285832460633498e-5, 1.000219976890169, -0.003999814758337735, -0.001999407467330312, -2.0006072617422668e-7, 0.00039024627526752765, -0.0007816882321445277, 0.00999935025163469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005227524248267188, -0.0059770054432413365, -0.003999814758337735, 1.0001249951840148, -3.7492775751760685e-13, -1.874638777660842e-13, 6.840987464700652e-10, 0.19619120652171437, -5.229940208971021e-5, 0.0, 0.0, 0.0, -0.004999518347016857, -2.499759173508461e-7, 4.999518347016862e-7, 0.005977680263163437, 0.0005242162791857848, -0.001999407467330312, -3.7492775751760685e-13, 1.000124995184327, -1.2497591851099853e-13, -0.19619120857359215, 1.538919331324802e-9, -2.9081799674457347e-5, 0.0, 0.0, 0.0, 2.499759173508461e-7, -0.004999518347016857, -7.499277520525296e-7, 0.0038083990887929683, 0.0023394552017524375, -2.0006072617422668e-7, -1.874638777660842e-13, -1.2497591851099853e-13, 1.0001249951845146, 4.546016692569398e-5, 3.934176327993112e-5, 0.017099369288981925, 0.0, 0.0, 0.0, -4.999518347016862e-7, 7.499277520525296e-7, -0.004999518347016857, 0.008788398793359999, 0.0007698123391225465, 0.00039024627526752765, 6.840987464700652e-10, -0.19619120857359215, 4.546016692569398e-5, 1.0386950992344823, 2.006557354121409e-6, 5.6065675170965385e-6, -0.009999999750000009, -1.000299964989502e-6, 1.999849930005254e-6, 9.840466222481138e-8, 0.002022594734785429, 0.0019957970857735273, -0.0007698002515747396, 0.008788423657129077, -0.0007816882321445277, 0.19619120652171437, 1.538919331324802e-9, 3.934176327993112e-5, 2.006557354121409e-6, 1.038692124140408, -7.422099956191234e-6, 9.99699965010502e-7, -0.009999999500000018, -3.000099894996507e-6, -0.002022793619244049, -2.518040866367352e-7, 0.00100459818070639, 6.713860443324207e-5, 3.754367779050982e-5, 0.00999935025163469, -5.229940208971021e-5, -2.9081799674457347e-5, 0.017099369288981925, 5.6065675170965385e-6, -7.422099956191234e-6, 1.0004973842774434, -2.000149929994754e-6, 2.9998998950035067e-6, -0.009999999350000023, -0.001995443431870137, -0.0010044956659830899, 4.888998147139426e-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009999999750000009, 9.99699965010502e-7, -2.000149929994754e-6, 1.000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.000299964989502e-6, -0.009999999500000018, 2.9998998950035067e-6, 0.0, 1.000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.999849930005254e-6, -3.000099894996507e-6, -0.009999999350000023, 0.0, 0.0, 1.000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004999518347016857, 2.499759173508461e-7, -4.999518347016862e-7, 9.840466222481138e-8, -0.002022793619244049, -0.001995443431870137, 0.0, 0.0, 0.0, 1.000001, 0.0, 0.0, 0.0, 0.0, 0.0, -2.499759173508461e-7, -0.004999518347016857, 7.499277520525296e-7, 0.002022594734785429, -2.518040866367352e-7, -0.0010044956659830899, 0.0, 0.0, 0.0, 0.0, 1.000001, 0.0, 0.0, 0.0, 0.0, 4.999518347016862e-7, -7.499277520525296e-7, -0.004999518347016857, 0.0019957970857735273, 0.00100459818070639, 4.888998147139426e-8, 0.0, 0.0, 0.0, 0.0, 0.0, 1.000001};
  // clang-format on
  Matrix Pd = slap_NewMatrixZeros(e, e);
  slap_MatrixSetIdentity(&Pd, 1.0);
  Matrix xd = slap_MatrixFromArray(n, 1, xd_);
  Matrix y_imu = slap_MatrixFromArray(m, 1, y_imu_);
  Matrix xp_expected = slap_MatrixFromArray(n, 1, xp_expected_);
  (void)xp_expected;
  double h = 0.01;

  // Compute State prediction
  rexquad_StatePrediction(&filter, xd.data, y_imu.data, Pd.data, h);

  // Check predicted state
  const Matrix xp =
      slap_MatrixFromArray(16, 1, (double*)rexquad_GetPredictedState(&filter));
  double err = slap_MatrixNormedDifference(&xp, &xp_expected);
  EXPECT_LT(err, 1e-10);

  // Check predicted covariance
  Matrix Pp_expected = slap_MatrixFromArray(15, 15, Pp_expected_);
  const Matrix Pp =
      slap_MatrixFromArray(15, 15, (double*)rexquad_GetPredictedCovariance(&filter));
  double err_cov = slap_MatrixNormedDifference(&Pp, &Pp_expected);
  EXPECT_LT(err_cov, 1e-10);

  rexquad_FreeDelayedMEKF(&filter);
  slap_FreeMatrix(&Pd);
}

}  // namespace rexquad